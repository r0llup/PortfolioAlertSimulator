#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18046
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortfolioDataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PortfolioDatabase")]
	public partial class PortfolioDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertPortfolio(Portfolio instance);
    partial void UpdatePortfolio(Portfolio instance);
    partial void DeletePortfolio(Portfolio instance);
    partial void InsertPriceHistory(PriceHistory instance);
    partial void UpdatePriceHistory(PriceHistory instance);
    partial void DeletePriceHistory(PriceHistory instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertCoupon(Coupon instance);
    partial void UpdateCoupon(Coupon instance);
    partial void DeleteCoupon(Coupon instance);
    partial void InsertBond(Bond instance);
    partial void UpdateBond(Bond instance);
    partial void DeleteBond(Bond instance);
    #endregion
		
		public PortfolioDataContext() : 
				base(global::PortfolioDataAccessLayer.Properties.Settings.Default.PortfolioDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PortfolioDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortfolioDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortfolioDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortfolioDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Portfolio> Portfolio
		{
			get
			{
				return this.GetTable<Portfolio>();
			}
		}
		
		public System.Data.Linq.Table<PriceHistory> PriceHistory
		{
			get
			{
				return this.GetTable<PriceHistory>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stock
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Coupon> Coupon
		{
			get
			{
				return this.GetTable<Coupon>();
			}
		}
		
		public System.Data.Linq.Table<Bond> Bond
		{
			get
			{
				return this.GetTable<Bond>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portfolio")]
	public partial class Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Time;
		
		private int _Bond;
		
		private int _BondQuantity;
		
		private int _Stock;
		
		private int _StockQuantity;
		
		private EntityRef<Stock> _Stock1;
		
		private EntityRef<Bond> _Bond1;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnBondChanging(int value);
    partial void OnBondChanged();
    partial void OnBondQuantityChanging(int value);
    partial void OnBondQuantityChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    partial void OnStockQuantityChanging(int value);
    partial void OnStockQuantityChanged();
    #endregion
		
		public Portfolio()
		{
			this._Stock1 = default(EntityRef<Stock>);
			this._Bond1 = default(EntityRef<Bond>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bond", DbType="Int NOT NULL")]
		public int Bond
		{
			get
			{
				return this._Bond;
			}
			set
			{
				if ((this._Bond != value))
				{
					if (this._Bond1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBondChanging(value);
					this.SendPropertyChanging();
					this._Bond = value;
					this.SendPropertyChanged("Bond");
					this.OnBondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BondQuantity", DbType="Int NOT NULL")]
		public int BondQuantity
		{
			get
			{
				return this._BondQuantity;
			}
			set
			{
				if ((this._BondQuantity != value))
				{
					this.OnBondQuantityChanging(value);
					this.SendPropertyChanging();
					this._BondQuantity = value;
					this.SendPropertyChanged("BondQuantity");
					this.OnBondQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					if (this._Stock1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockQuantity", DbType="Int NOT NULL")]
		public int StockQuantity
		{
			get
			{
				return this._StockQuantity;
			}
			set
			{
				if ((this._StockQuantity != value))
				{
					this.OnStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._StockQuantity = value;
					this.SendPropertyChanged("StockQuantity");
					this.OnStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Stock1", ThisKey="Stock", OtherKey="Id", IsForeignKey=true)]
		public Stock Stock1
		{
			get
			{
				return this._Stock1.Entity;
			}
			set
			{
				Stock previousValue = this._Stock1.Entity;
				if (((previousValue != value) 
							|| (this._Stock1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock1.Entity = null;
						previousValue.Portfolio.Remove(this);
					}
					this._Stock1.Entity = value;
					if ((value != null))
					{
						value.Portfolio.Add(this);
						this._Stock = value.Id;
					}
					else
					{
						this._Stock = default(int);
					}
					this.SendPropertyChanged("Stock1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bond_Portfolio", Storage="_Bond1", ThisKey="Bond", OtherKey="Id", IsForeignKey=true)]
		public Bond Bond1
		{
			get
			{
				return this._Bond1.Entity;
			}
			set
			{
				Bond previousValue = this._Bond1.Entity;
				if (((previousValue != value) 
							|| (this._Bond1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bond1.Entity = null;
						previousValue.Portfolio.Remove(this);
					}
					this._Bond1.Entity = value;
					if ((value != null))
					{
						value.Portfolio.Add(this);
						this._Bond = value.Id;
					}
					else
					{
						this._Bond = default(int);
					}
					this.SendPropertyChanged("Bond1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceHistory")]
	public partial class PriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Time;
		
		private decimal _Price;
		
		private EntitySet<Stock> _Stock;
		
		private EntitySet<Bond> _Bond;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public PriceHistory()
		{
			this._Stock = new EntitySet<Stock>(new Action<Stock>(this.attach_Stock), new Action<Stock>(this.detach_Stock));
			this._Bond = new EntitySet<Bond>(new Action<Bond>(this.attach_Bond), new Action<Bond>(this.detach_Bond));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceHistory_Stock", Storage="_Stock", ThisKey="Id", OtherKey="PriceHistory")]
		public EntitySet<Stock> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				this._Stock.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceHistory_Bond", Storage="_Bond", ThisKey="Id", OtherKey="PriceHistory")]
		public EntitySet<Bond> Bond
		{
			get
			{
				return this._Bond;
			}
			set
			{
				this._Bond.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.PriceHistory1 = this;
		}
		
		private void detach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.PriceHistory1 = null;
		}
		
		private void attach_Bond(Bond entity)
		{
			this.SendPropertyChanging();
			entity.PriceHistory1 = this;
		}
		
		private void detach_Bond(Bond entity)
		{
			this.SendPropertyChanging();
			entity.PriceHistory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PriceHistory;
		
		private EntitySet<Portfolio> _Portfolio;
		
		private EntityRef<PriceHistory> _PriceHistory1;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPriceHistoryChanging(int value);
    partial void OnPriceHistoryChanged();
    #endregion
		
		public Stock()
		{
			this._Portfolio = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolio), new Action<Portfolio>(this.detach_Portfolio));
			this._PriceHistory1 = default(EntityRef<PriceHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceHistory", DbType="Int NOT NULL")]
		public int PriceHistory
		{
			get
			{
				return this._PriceHistory;
			}
			set
			{
				if ((this._PriceHistory != value))
				{
					if (this._PriceHistory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceHistoryChanging(value);
					this.SendPropertyChanging();
					this._PriceHistory = value;
					this.SendPropertyChanged("PriceHistory");
					this.OnPriceHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Portfolio", ThisKey="Id", OtherKey="Stock")]
		public EntitySet<Portfolio> Portfolio
		{
			get
			{
				return this._Portfolio;
			}
			set
			{
				this._Portfolio.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceHistory_Stock", Storage="_PriceHistory1", ThisKey="PriceHistory", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PriceHistory PriceHistory1
		{
			get
			{
				return this._PriceHistory1.Entity;
			}
			set
			{
				PriceHistory previousValue = this._PriceHistory1.Entity;
				if (((previousValue != value) 
							|| (this._PriceHistory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceHistory1.Entity = null;
						previousValue.Stock.Remove(this);
					}
					this._PriceHistory1.Entity = value;
					if ((value != null))
					{
						value.Stock.Add(this);
						this._PriceHistory = value.Id;
					}
					else
					{
						this._PriceHistory = default(int);
					}
					this.SendPropertyChanged("PriceHistory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolio(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock1 = this;
		}
		
		private void detach_Portfolio(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coupon")]
	public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Value;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _LastDate;
		
		private int _Frequency;
		
		private EntitySet<Bond> _Bond;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnLastDateChanging(System.DateTime value);
    partial void OnLastDateChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    #endregion
		
		public Coupon()
		{
			this._Bond = new EntitySet<Bond>(new Action<Bond>(this.attach_Bond), new Action<Bond>(this.detach_Bond));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Money NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coupon_Bond", Storage="_Bond", ThisKey="Id", OtherKey="Coupon")]
		public EntitySet<Bond> Bond
		{
			get
			{
				return this._Bond;
			}
			set
			{
				this._Bond.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bond(Bond entity)
		{
			this.SendPropertyChanging();
			entity.Coupon1 = this;
		}
		
		private void detach_Bond(Bond entity)
		{
			this.SendPropertyChanging();
			entity.Coupon1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bond")]
	public partial class Bond : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PriceHistory;
		
		private int _Coupon;
		
		private EntitySet<Portfolio> _Portfolio;
		
		private EntityRef<Coupon> _Coupon1;
		
		private EntityRef<PriceHistory> _PriceHistory1;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPriceHistoryChanging(int value);
    partial void OnPriceHistoryChanged();
    partial void OnCouponChanging(int value);
    partial void OnCouponChanged();
    #endregion
		
		public Bond()
		{
			this._Portfolio = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolio), new Action<Portfolio>(this.detach_Portfolio));
			this._Coupon1 = default(EntityRef<Coupon>);
			this._PriceHistory1 = default(EntityRef<PriceHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceHistory", DbType="Int NOT NULL")]
		public int PriceHistory
		{
			get
			{
				return this._PriceHistory;
			}
			set
			{
				if ((this._PriceHistory != value))
				{
					if (this._PriceHistory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceHistoryChanging(value);
					this.SendPropertyChanging();
					this._PriceHistory = value;
					this.SendPropertyChanged("PriceHistory");
					this.OnPriceHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coupon", DbType="Int NOT NULL")]
		public int Coupon
		{
			get
			{
				return this._Coupon;
			}
			set
			{
				if ((this._Coupon != value))
				{
					if (this._Coupon1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCouponChanging(value);
					this.SendPropertyChanging();
					this._Coupon = value;
					this.SendPropertyChanged("Coupon");
					this.OnCouponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bond_Portfolio", Storage="_Portfolio", ThisKey="Id", OtherKey="Bond")]
		public EntitySet<Portfolio> Portfolio
		{
			get
			{
				return this._Portfolio;
			}
			set
			{
				this._Portfolio.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coupon_Bond", Storage="_Coupon1", ThisKey="Coupon", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Coupon Coupon1
		{
			get
			{
				return this._Coupon1.Entity;
			}
			set
			{
				Coupon previousValue = this._Coupon1.Entity;
				if (((previousValue != value) 
							|| (this._Coupon1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coupon1.Entity = null;
						previousValue.Bond.Remove(this);
					}
					this._Coupon1.Entity = value;
					if ((value != null))
					{
						value.Bond.Add(this);
						this._Coupon = value.Id;
					}
					else
					{
						this._Coupon = default(int);
					}
					this.SendPropertyChanged("Coupon1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceHistory_Bond", Storage="_PriceHistory1", ThisKey="PriceHistory", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PriceHistory PriceHistory1
		{
			get
			{
				return this._PriceHistory1.Entity;
			}
			set
			{
				PriceHistory previousValue = this._PriceHistory1.Entity;
				if (((previousValue != value) 
							|| (this._PriceHistory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceHistory1.Entity = null;
						previousValue.Bond.Remove(this);
					}
					this._PriceHistory1.Entity = value;
					if ((value != null))
					{
						value.Bond.Add(this);
						this._PriceHistory = value.Id;
					}
					else
					{
						this._PriceHistory = default(int);
					}
					this.SendPropertyChanged("PriceHistory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolio(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Bond1 = this;
		}
		
		private void detach_Portfolio(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Bond1 = null;
		}
	}
}
#pragma warning restore 1591
