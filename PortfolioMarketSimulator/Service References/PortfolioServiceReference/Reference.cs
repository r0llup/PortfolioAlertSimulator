//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18046
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortfolioMarketSimulator.PortfolioServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckResult", Namespace="http://schemas.datacontract.org/2004/07/PortfolioServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CheckResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMarketValueCheckInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsWeightCheckInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortfolioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketValueCheckIn {
            get {
                return this.IsMarketValueCheckInField;
            }
            set {
                if ((this.IsMarketValueCheckInField.Equals(value) != true)) {
                    this.IsMarketValueCheckInField = value;
                    this.RaisePropertyChanged("IsMarketValueCheckIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWeightCheckIn {
            get {
                return this.IsWeightCheckInField;
            }
            set {
                if ((this.IsWeightCheckInField.Equals(value) != true)) {
                    this.IsWeightCheckInField = value;
                    this.RaisePropertyChanged("IsWeightCheckIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Portfolio {
            get {
                return this.PortfolioField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioField, value) != true)) {
                    this.PortfolioField = value;
                    this.RaisePropertyChanged("Portfolio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PortfolioServiceReference.IPortfolioService")]
    public interface IPortfolioService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioService/GetCheckResults", ReplyAction="http://tempuri.org/IPortfolioService/GetCheckResultsResponse")]
        System.Collections.Generic.List<PortfolioMarketSimulator.PortfolioServiceReference.CheckResult> GetCheckResults(System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioService/GetCheckResults", ReplyAction="http://tempuri.org/IPortfolioService/GetCheckResultsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<PortfolioMarketSimulator.PortfolioServiceReference.CheckResult>> GetCheckResultsAsync(System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioService/SimulateMarket", ReplyAction="http://tempuri.org/IPortfolioService/SimulateMarketResponse")]
        bool SimulateMarket(decimal percentage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortfolioService/SimulateMarket", ReplyAction="http://tempuri.org/IPortfolioService/SimulateMarketResponse")]
        System.Threading.Tasks.Task<bool> SimulateMarketAsync(decimal percentage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortfolioServiceChannel : PortfolioMarketSimulator.PortfolioServiceReference.IPortfolioService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortfolioServiceClient : System.ServiceModel.ClientBase<PortfolioMarketSimulator.PortfolioServiceReference.IPortfolioService>, PortfolioMarketSimulator.PortfolioServiceReference.IPortfolioService {
        
        public PortfolioServiceClient() {
        }
        
        public PortfolioServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PortfolioServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<PortfolioMarketSimulator.PortfolioServiceReference.CheckResult> GetCheckResults(System.DateTime startTime) {
            return base.Channel.GetCheckResults(startTime);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<PortfolioMarketSimulator.PortfolioServiceReference.CheckResult>> GetCheckResultsAsync(System.DateTime startTime) {
            return base.Channel.GetCheckResultsAsync(startTime);
        }
        
        public bool SimulateMarket(decimal percentage) {
            return base.Channel.SimulateMarket(percentage);
        }
        
        public System.Threading.Tasks.Task<bool> SimulateMarketAsync(decimal percentage) {
            return base.Channel.SimulateMarketAsync(percentage);
        }
    }
}
